<?php

namespace Modules\Exercise02\Tests\Service;

use Carbon\Carbon;
use InvalidArgumentException;
use Modules\Exercise02\Models\ATM;
use Modules\Exercise02\Repositories\ATMRepository;
use Modules\Exercise02\Services\ATMService;
use Tests\TestCase;

class ATMServiceTest extends TestCase
{
    protected $atmService;
    protected $atmRepository;

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->atmRepository = $this->mock(ATMRepository::class);
        $this->atmService = new ATMService($this->atmRepository);
    }

    public function test_calculate_not_exists_card()
    {
        $cardId = 0;
        $this->atmRepository->shouldReceive('find')->andReturn([]);
        $this->expectExceptionMessage('Card ID is invalid!');
        $this->expectException(InvalidArgumentException::class);
        $this->atmService->calculate($cardId);
    }

    public function test_calculate_vip()
    {
        $cardId = 1;
        $atmMock = $this->mock(ATM::class)->makePartial();
        $atmMock->is_vip = true;
        $this->atmRepository->shouldReceive('find')->andReturn($atmMock);
        $result = $this->atmService->calculate($cardId);
        $this->assertEquals($result, $this->atmService::NO_FEE);
    }

    public function test_caculate_is_weekend()
    {
        $cardId = 1;
        $atmMock = $this->mock(ATM::class)->makePartial();
        $atmMock->is_vip = false;
        $this->atmRepository->shouldReceive('find')->andReturn($atmMock);
        Carbon::setTestNow(Carbon::parse('2021-05-08'));

        $result = $this->atmService->calculate($cardId);
        $this->assertEquals($result, $this->atmService::NORMAL_FEE);
    }

    public function test_caculate_is_sunday()
    {
        $cardId = 1;
        $atmMock = $this->mock(ATM::class)->makePartial();
        $atmMock->is_vip = false;
        $this->atmRepository->shouldReceive('find')->andReturn($atmMock);
        Carbon::setTestNow(Carbon::parse('2021-05-09'));

        $result = $this->atmService->calculate($cardId);
        $this->assertEquals($result, $this->atmService::NORMAL_FEE);
    }

    public function test_caculate_is_holiday()
    {
        $cardId = 1;
        $atmMock = $this->mock(ATM::class)->makePartial();
        $atmMock->is_vip = false;
        $this->atmRepository->shouldReceive('find')->andReturn($atmMock);
        Carbon::setTestNow(Carbon::parse('2021-05-01'));

        $result = $this->atmService->calculate($cardId);
        $this->assertEquals($result, $this->atmService::NORMAL_FEE);
    }

    public function test_caculate_normal_at_00_00()
    {
        $cardId = 1;
        $atmMock = $this->mock(ATM::class)->makePartial();
        $atmMock->is_vip = false;
        $this->atmRepository->shouldReceive('find')->andReturn($atmMock);
        Carbon::setTestNow(Carbon::parse('2021-05-03 00:00:00'));
        $result = $this->atmService->calculate($cardId);
        $this->assertEquals($result, $this->atmService::NORMAL_FEE);
    }

    public function test_caculate_normal_at_00_01()
    {
        $cardId = 1;
        $atmMock = $this->mock(ATM::class)->makePartial();
        $atmMock->is_vip = false;
        $this->atmRepository->shouldReceive('find')->andReturn($atmMock);
        Carbon::setTestNow(Carbon::parse('2021-05-03 00:00:01'));
        $result = $this->atmService->calculate($cardId);
        $this->assertEquals($result, $this->atmService::NORMAL_FEE);
    }

    public function test_caculate_normal_at_08_43()
    {
        $cardId = 1;
        $atmMock = $this->mock(ATM::class)->makePartial();
        $atmMock->is_vip = false;
        $this->atmRepository->shouldReceive('find')->andReturn($atmMock);
        Carbon::setTestNow(Carbon::parse('2021-05-03 08:43:59'));
        $result = $this->atmService->calculate($cardId);
        $this->assertEquals($result, $this->atmService::NORMAL_FEE);
    }

    public function test_caculate_normal_at_08_44()
    {
        $cardId = 1;
        $atmMock = $this->mock(ATM::class)->makePartial();
        $atmMock->is_vip = false;
        $this->atmRepository->shouldReceive('find')->andReturn($atmMock);
        Carbon::setTestNow(Carbon::parse('2021-05-03 08:44:00'));
        $result = $this->atmService->calculate($cardId);
        $this->assertEquals($result, $this->atmService::NORMAL_FEE);
    }

    public function test_caculate_normal_at_08_45()
    {
        $cardId = 1;
        $atmMock = $this->mock(ATM::class)->makePartial();
        $atmMock->is_vip = false;
        $this->atmRepository->shouldReceive('find')->andReturn($atmMock);
        Carbon::setTestNow(Carbon::parse('2021-05-03 08:45:00'));
        $result = $this->atmService->calculate($cardId);
        $this->assertEquals($result, $this->atmService::NO_FEE);
    }

    public function test_caculate_normal_at_08_46()
    {
        $cardId = 1;
        $atmMock = $this->mock(ATM::class)->makePartial();
        $atmMock->is_vip = false;
        $this->atmRepository->shouldReceive('find')->andReturn($atmMock);
        Carbon::setTestNow(Carbon::parse('2021-05-03 08:46:00'));
        $result = $this->atmService->calculate($cardId);
        $this->assertEquals($result, $this->atmService::NO_FEE);
    }

    public function test_caculate_normal_at_17_58()
    {
        $cardId = 1;
        $atmMock = $this->mock(ATM::class)->makePartial();
        $atmMock->is_vip = false;
        $this->atmRepository->shouldReceive('find')->andReturn($atmMock);
        Carbon::setTestNow(Carbon::parse('2021-05-03 17:58:00'));
        $result = $this->atmService->calculate($cardId);
        $this->assertEquals($result, $this->atmService::NO_FEE);
    }

    public function test_caculate_normal_at_17_59()
    {
        $cardId = 1;
        $atmMock = $this->mock(ATM::class)->makePartial();
        $atmMock->is_vip = false;
        $this->atmRepository->shouldReceive('find')->andReturn($atmMock);
        Carbon::setTestNow(Carbon::parse('2021-05-03 17:59:00'));
        $result = $this->atmService->calculate($cardId);
        $this->assertEquals($result, $this->atmService::NO_FEE);
    }

    public function test_caculate_normal_at_18_00()
    {
        $cardId = 1;
        $atmMock = $this->mock(ATM::class)->makePartial();
        $atmMock->is_vip = false;
        $this->atmRepository->shouldReceive('find')->andReturn($atmMock);
        Carbon::setTestNow(Carbon::parse('2021-05-03 18:00:00'));
        $result = $this->atmService->calculate($cardId);
        $this->assertEquals($result, $this->atmService::NORMAL_FEE);
    }

    public function test_caculate_normal_at_18_01()
    {
        $cardId = 1;
        $atmMock = $this->mock(ATM::class)->makePartial();
        $atmMock->is_vip = false;
        $this->atmRepository->shouldReceive('find')->andReturn($atmMock);
        Carbon::setTestNow(Carbon::parse('2021-05-03 18:01:00'));
        $result = $this->atmService->calculate($cardId);
        $this->assertEquals($result, $this->atmService::NORMAL_FEE);
    }

    public function test_caculate_normal_at_23_58()
    {
        $cardId = 1;
        $atmMock = $this->mock(ATM::class)->makePartial();
        $atmMock->is_vip = false;
        $this->atmRepository->shouldReceive('find')->andReturn($atmMock);
        Carbon::setTestNow(Carbon::parse('2021-05-03 23:58:00'));
        $result = $this->atmService->calculate($cardId);
        $this->assertEquals($result, $this->atmService::NORMAL_FEE);
    }

    public function test_caculate_normal_at_23_59()
    {
        $cardId = 1;
        $atmMock = $this->mock(ATM::class)->makePartial();
        $atmMock->is_vip = false;
        $this->atmRepository->shouldReceive('find')->andReturn($atmMock);
        Carbon::setTestNow(Carbon::parse('2021-05-03 23:58:00'));
        $result = $this->atmService->calculate($cardId);
        $this->assertEquals($result, $this->atmService::NORMAL_FEE);
    }
}
