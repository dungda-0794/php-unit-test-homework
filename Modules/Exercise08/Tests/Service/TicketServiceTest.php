<?php

namespace Modules\Exercise08\Tests\Service;

use Carbon\Carbon;
use Modules\Exercise08\Services\TicketService;
use InvalidArgumentException;
use Tests\TestCase;

class TicketServiceTest extends TestCase
{
    protected $ticketService;

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->ticketService = new TicketService();
    }

    public function test_calculate_price_invalid()
    {
        $inputs = [
            'booking_date' => Carbon::parse('2021-05-01'),
            'age' => 121,
        ];
        $this->expectException(InvalidArgumentException::class);
        $this->ticketService->calculatePrice($inputs);
    }

    public function test_calculate_price_age_less_13()
    {
        $inputs = [
            'booking_date' => Carbon::parse('2021-05-01'),
            'age' => 12,
        ];
        $calculate = $this->ticketService::BASE_PRICE*0.5;
        $result = $this->ticketService->calculatePrice($inputs);
        $this->assertEquals($calculate, $result);
    }

    public function test_calculate_female_booking_in_friday()
    {
        $inputs = [
            'booking_date' => Carbon::parse('2021-04-30'),
            'age' => 20,
            'gender' => config('exercise08.gender.female'),
        ];
        $calculate = $this->ticketService::PRICE_FEMALE_FRIDAY;
        $result = $this->ticketService->calculatePrice($inputs);
        $this->assertEquals($calculate, $result);
    }

    public function test_calculate_female_than_65_age_booking_in_friday()
    {
        $inputs = [
            'booking_date' => Carbon::parse('2021-04-30'),
            'age' => 66,
            'gender' => config('exercise08.gender.female'),
        ];
        $calculate = $this->ticketService::PRICE_FEMALE_FRIDAY;
        $result = $this->ticketService->calculatePrice($inputs);
        $this->assertEquals($calculate, $result);
    }

    public function test_calculate_female_than_65_age_booking()
    {
        $inputs = [
            'booking_date' => Carbon::parse('2021-04-31'),
            'age' => 66,
            'gender' => config('exercise08.gender.female'),
        ];
        $calculate = $this->ticketService::PRICE_OVER_65;
        $result = $this->ticketService->calculatePrice($inputs);
        $this->assertEquals($calculate, $result);
    }

    public function test_calculate_base_price()
    {
        $inputs = [
            'booking_date' => Carbon::parse('2021-04-31'),
            'age' => 20,
            'gender' => config('exercise08.gender.male'),
        ];
        $calculate = $this->ticketService::BASE_PRICE;
        $result = $this->ticketService->calculatePrice($inputs);
        $this->assertEquals($calculate, $result);
    }

    public function test_calculate_in_tuesday()
    {
        $inputs = [
            'booking_date' => Carbon::parse('2021-05-04'),
            'age' => 20,
            'gender' => config('exercise08.gender.male'),
        ];
        $calculate = $this->ticketService::PRICE_IN_TUESDAY;
        $result = $this->ticketService->calculatePrice($inputs);
        $this->assertEquals($calculate, $result);
    }
}
