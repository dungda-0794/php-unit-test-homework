<?php

namespace Modules\Exercise03\Tests\Service;

use InvalidArgumentException;
use Modules\Exercise03\Models\Product;
use Modules\Exercise03\Repositories\ProductRepository;
use Modules\Exercise03\Services\ProductService;
use Tests\TestCase;

class ProductServiceTest extends TestCase
{
    protected $productService;
    protected $productRepository;

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->productRepository = $this->mock(ProductRepository::class);
        $this->productService = new ProductService($this->productRepository);
    }

    public function test_calculate_discount_invalid()
    {
        $totalProducts = [
            Product::CRAVAT_TYPE => -1,
            Product::WHITE_SHIRT_TYPE => null,
            Product::OTHER_TYPE => null,
        ];
        $this->expectException(InvalidArgumentException::class);
        $this->productService->calculateDiscount($totalProducts);
    }

    public function test_calculate_discount_cravat()
    {
        $totalProducts = [
            Product::CRAVAT_TYPE => 1,
            Product::WHITE_SHIRT_TYPE => 0,
            Product::OTHER_TYPE => 1,
        ];
        $result = $this->productService->calculateDiscount($totalProducts);
        $this->assertEquals($result, 0);
    }

    public function test_calculate_discount_white_shirt()
    {
        $totalProducts = [
            Product::CRAVAT_TYPE => 0,
            Product::WHITE_SHIRT_TYPE => 1,
            Product::OTHER_TYPE => 1,
        ];
        $result = $this->productService->calculateDiscount($totalProducts);
        $this->assertEquals($result, 0);
    }

    public function test_calculate_discount_cravat_and_white_shirt()
    {
        $totalProducts = [
            Product::CRAVAT_TYPE => 1,
            Product::WHITE_SHIRT_TYPE => 1,
            Product::OTHER_TYPE => 1,
        ];
        $result = $this->productService->calculateDiscount($totalProducts);
        $this->assertEquals($result, $this->productService::CRAVAT_WHITE_SHIRT_DISCOUNT);
    }

    public function test_calculate_discount_total_6()
    {
        $totalProducts = [
            Product::CRAVAT_TYPE => 0,
            Product::WHITE_SHIRT_TYPE => 1,
            Product::OTHER_TYPE => 5,
        ];
        $result = $this->productService->calculateDiscount($totalProducts);
        $this->assertEquals($result, 0);
    }
    public function test_calculate_discount_total_8()
    {
        $totalProducts = [
            Product::CRAVAT_TYPE => 0,
            Product::WHITE_SHIRT_TYPE => 1,
            Product::OTHER_TYPE => 7,
        ];
        $result = $this->productService->calculateDiscount($totalProducts);
        $this->assertEquals($result, $this->productService::QUANTITY_DISCOUNT);
    }


    public function test_calculate_discount_total_7()
    {
        $totalProducts = [
            Product::CRAVAT_TYPE => 0,
            Product::WHITE_SHIRT_TYPE => 1,
            Product::OTHER_TYPE => 6,
        ];
        $result = $this->productService->calculateDiscount($totalProducts);
        $this->assertEquals($result, $this->productService::QUANTITY_DISCOUNT);
    }

    public function test_calculate_discount_total_product_7_caravat_and_white_shirt()
    {
        $totalProducts = [
            Product::CRAVAT_TYPE => 1,
            Product::WHITE_SHIRT_TYPE => 1,
            Product::OTHER_TYPE => 5,
        ];
        $result = $this->productService->calculateDiscount($totalProducts);
        $discount = $this->productService::QUANTITY_DISCOUNT + $this->productService::CRAVAT_WHITE_SHIRT_DISCOUNT;
        $this->assertEquals($result, $discount);
    }

    public function test_get_all_products()
    {
        $data = collect([]);
        $this->productRepository->shouldReceive('all')->andReturn($data);
        $result = $this->productService->getAllProducts();
        $this->assertEquals($result, $data);
    }

}
